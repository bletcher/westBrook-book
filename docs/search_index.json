[["index.html", "The West Brook Story Chapter 1 Introduction 1.1 The West Brook", " The West Brook Story Ben Letcher 2022-03-22 Chapter 1 Introduction This book describes accessing, cleaning, and analyzing data from the West Brook Study in Whateley MA, USA. Use bookdown::render_book() to render the book (not showing up in the Build tab like the bookdown book says it should. Use bookdown::render_book(\"index.Rmd\", \"bookdown::gitbook\") to force html book. bookdown::preview_chapter(\"index.Rmd\", \"bookdown::gitbook\") to update just one chapter (index.Rmd as example here). Use clean_book() to clean up temporary files. 1.1 The West Brook The Ecology Section at the USGS Conte Laboratory has studied fish in the West Brook since 1997. The goal is to understand the strength and direction of drivers on fish growth, movement, reproduction and survival in the wild. We hope to provide a comprehensive understanding of fish population dynamics and ultimately individual fitness (natural selection and evolution) in the study area. Interactive applications allow exploration of the raw data. "],["getData.html", "Chapter 2 Get data 2.1 Electrofishing data 2.2 Capture-recapture data 2.3 Wanding data 2.4 Antenna data", " Chapter 2 Get data The server hosting the data is named osensei and is at UMass (osensei.cns.umass.edu). It can be accessed using functions in the getWBData package. Use devtools::install_github('Conte-Ecology/westBrookData/getWBData') to install. Most of the functions will run reconnect() to connect to the server with your username and password. Run reconnect() from the console to connect if necessary. Use conDplyr to see the list of available tables on the server. Details about the getWBData package are here. There are four main databases we want to create: 1. cdWB_electro0 West Brook electrofishing data, 3 species (brook trout, brown trout and Atlantic salmon), tagged and untagged fish 2. cdWB_CMR0 West Brook electrofishing data formatted for Capture-Mark-Recapture analysis for tagged individuals 3. cdWB_wanding0 West Brook wanding (portable antenna) data, all tagged salmonids 4. cdWB_antenna0 West Brook stationary antenna data, all tagged salmonids The 0 at the end of these file names indicates that they are the initial files that will be wrangled in the next step (next chapter). cd stands for core data. The getNew_... variables determine whether the data are retrieved from the server. Change to TRUE to get a new data frame, e.g.Â when there are new data on the server. getNew_cdWB_electro0 &lt;- FALSE getNew_cdWB_CMR0 &lt;- FALSE getNew_cdWB_wanding0 &lt;- FALSE getNew_cdWB_antenna0 &lt;- FALSE 2.1 Electrofishing data This section retrieves electrofishing data, including both tagged and untagged fish. Fish were untagged if they were too small (&lt; 60 mm, 2 g wet weight) or were captured outside of the core study area (tributaries and 47 sections of the mainstem West Brook). 2.1.1 Get data # default values for createCoreData() # function (sampleType = &quot;electrofishing&quot;, baseColumns = T, # columnsToAdd = NULL, includeUntagged = F, whichDrainage = &quot;west&quot;) if(getNew_cdWB_electro0) { cdWB_electro0 &lt;- createCoreData( sampleType = &quot;electrofishing&quot;, #&quot;stationaryAntenna&quot;,&quot;portableAntenna&quot; columnsToAdd = c(&quot;sampleNumber&quot;, &quot;river&quot;, &quot;survey&quot;, &quot;pass&quot;, &quot;observedLength&quot;, &quot;observedWeight&quot;, &quot;comments&quot;), includeUntagged = TRUE, whichDrainage = &quot;west&quot; ) %&gt;% addTagProperties( columnsToAdd = c(&quot;cohort&quot;, &quot;species&quot;, &quot;dateEmigrated&quot;, &quot;sex&quot;, &quot;species&quot; ) ) %&gt;% dplyr::filter(species %in% c( &quot;bkt&quot;,&quot;bnt&quot;,&quot;ats&quot;), area %in% c(&quot;trib&quot;,&quot;inside&quot;,&quot;below&quot;,&quot;above&quot;), !is.na(sampleNumber)) %&gt;% addSampleProperties() %&gt;% addEnvironmental() save(cdWB_electro0, file = &#39;./data/cdWB_electro0.RData&#39;) } else { load(file = &#39;./data/cdWB_electro0.RData&#39;) } str(cdWB_electro0) ## tibble [91,103 x 22] (S3: tbl_df/tbl/data.frame) ## $ tag : chr [1:91103] &quot;00088cbed0&quot; &quot;00088cbed3&quot; &quot;00088cbed4&quot; &quot;00088cbed4&quot; ... ## $ detectionDate : POSIXct[1:91103], format: &quot;2013-03-25 00:00:00&quot; &quot;2012-06-07 09:03:00&quot; &quot;2013-03-29 10:08:00&quot; &quot;2013-06-25 14:51:00&quot; ... ## $ sampleName : chr [1:91103] &quot;84&quot; &quot;81&quot; &quot;84&quot; &quot;85&quot; ... ## $ sampleNumber : num [1:91103] 73 70 73 74 70 71 73 79 80 71 ... ## $ river : chr [1:91103] &quot;wb obear&quot; &quot;west brook&quot; &quot;west brook&quot; &quot;west brook&quot; ... ## $ section : chr [1:91103] &quot;7&quot; &quot;1&quot; &quot;40&quot; &quot;44&quot; ... ## $ area : chr [1:91103] &quot;trib&quot; &quot;inside&quot; &quot;inside&quot; &quot;inside&quot; ... ## $ observedLength : num [1:91103] 62 62 109 154 113 120 147 70 74 86 ... ## $ survey : chr [1:91103] &quot;shock&quot; &quot;shock&quot; &quot;shock&quot; &quot;shock&quot; ... ## $ pass : num [1:91103] 1 1 1 1 1 1 1 1 1 1 ... ## $ observedWeight : num [1:91103] 1.9 2.7 12.6 41.3 15.5 18.3 30.4 3.5 4.8 6.7 ... ## $ comments : chr [1:91103] &quot;additional genetic sample&quot; NA NA NA ... ## $ cohort : num [1:91103] 2012 2012 2012 2012 2011 ... ## $ species : chr [1:91103] &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; ... ## $ dateEmigrated : Date[1:91103], format: NA NA NA NA ... ## $ sex : chr [1:91103] NA NA NA NA ... ## $ year : num [1:91103] 2013 2012 2013 2013 2012 ... ## $ season : num [1:91103] 1 2 1 2 2 3 1 3 4 3 ... ## $ proportionSampled: num [1:91103] 1 1 1 1 1 1 1 1 1 1 ... ## $ lagDetectionDate : POSIXct[1:91103], format: NA NA &quot;2013-06-25 14:51:00&quot; NA ... ## $ meanTemperature : num [1:91103] NaN NaN 10.7 NaN 16.5 ... ## $ meanFlow : num [1:91103] NaN NaN 0.5247 NaN 0.0338 ... 2.1.2 Wrangle data This section takes cdWB_electro0 and cleans it to create cdWB_electro. reclean_cdWB_electro &lt;- FALSE if(reclean_cdWB_electro){ drainage &lt;- &#39;west&#39; # functions in getPrepareWBData library cdWB_electro &lt;- cdWB_electro0 %&gt;% cleanData(drainage) %&gt;% mergeSites(drainage) %&gt;% addNPasses(drainage) %&gt;% mutate(drainage = drainage) save(cdWB_electro, file = &#39;./data/cdWB_electro.RData&#39;) } else { load(file = &#39;./data/cdWB_electro.RData&#39;) } 2.1.3 Explore data ggplot(cdWB_electro, aes(observedLength, observedWeight, color = species)) + geom_point(alpha = 0.1) + scale_x_log10() + scale_y_log10() + theme_publication() + facet_wrap(~ species) lwReg &lt;- cdWB_electro %&gt;% nest_by(species) %&gt;% mutate(reg = list(lm(log(observedWeight) ~ log(observedLength), data = data))) lwReg %&gt;% summarise(broom::tidy(reg)) ## # A tibble: 6 x 6 ## # Groups: species [3] ## species term estimate std.error statistic p.value ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ats (Intercept) -11.4 0.00942 -1210. 0 ## 2 ats log(observedLength) 3.00 0.00208 1442. 0 ## 3 bkt (Intercept) -11.5 0.00621 -1859. 0 ## 4 bkt log(observedLength) 3.02 0.00140 2155. 0 ## 5 bnt (Intercept) -11.5 0.00686 -1670. 0 ## 6 bnt log(observedLength) 3.01 0.00149 2023. 0 lwReg %&gt;% summarise(broom::glance(reg)) ## # A tibble: 3 x 13 ## # Groups: species [3] ## species r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC deviance df.residual nobs ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 ats 0.989 0.989 0.0945 2080611. 0 1 22663. -45319. -45295. 215. 24092 24094 ## 2 bkt 0.991 0.991 0.112 4643341. 0 1 32555. -65105. -65079. 537. 42490 42492 ## 3 bnt 0.996 0.996 0.0858 4092957. 0 1 18345. -36683. -36660. 130. 17694 17696 2.2 Capture-recapture data 2.2.1 Get data West Brook electrofishing data formatted for Capture-Mark-Recapture analysis for tagged individuals if(getNew_cdWB_CMR0) { cdWB_CMR0 &lt;- createCoreData( sampleType = &quot;electrofishing&quot;, #&quot;stationaryAntenna&quot;,&quot;portableAntenna&quot;), whichDrainage = &quot;west&quot;, columnsToAdd = c(&quot;sampleNumber&quot;, &quot;river&quot;, &quot;riverMeter&quot;, &quot;survey&quot;, &quot;pass&quot;, &#39;observedLength&#39;, &#39;observedWeight&#39;) ) %&gt;% addTagProperties( columnsToAdd = c(&quot;cohort&quot;, &quot;species&quot;, &quot;dateEmigrated&quot;, &quot;sex&quot;, &quot;species&quot;) ) %&gt;% dplyr::filter(!is.na(tag), area %in% c(&quot;trib&quot;,&quot;inside&quot;,&quot;below&quot;,&quot;above&quot;), !is.na(sampleNumber) ) %&gt;% createCmrData(maxAgeInSamples = 20, inside = F, censorDead = F, censorEmigrated = T) %&gt;% addSampleProperties() %&gt;% addEnvironmental() %&gt;% addKnownZ() %&gt;% fillSizeLocation(size = F) #assumes fish stay in same location until observed elsewhere save(cdWB_CMR0, file = &#39;./data/cdWB_CMR0.RData&#39;) } else { load(file = &#39;./data/cdWB_CMR0.RData&#39;) } str(cdWB_CMR0) ## tibble [483,605 x 26] (S3: tbl_df/tbl/data.frame) ## $ tag : chr [1:483605] &quot;00088cc21e&quot; &quot;00088cc21e&quot; &quot;00088cc21e&quot; &quot;00088cc21e&quot; ... ## $ cohort : num [1:483605] 2012 2012 2012 2012 2012 ... ## $ detectionDate : POSIXct[1:483605], format: &quot;2012-06-05 00:00:00&quot; &quot;2012-09-17 00:00:00&quot; &quot;2012-12-12 00:00:00&quot; &quot;2013-03-25 00:00:00&quot; ... ## $ sampleName : chr [1:483605] &quot;81&quot; &quot;82&quot; &quot;83&quot; &quot;84&quot; ... ## $ sampleNumber : num [1:483605] 70 71 72 73 74 75 76 77 78 79 ... ## $ river : chr [1:483605] &quot;wb jimmy&quot; &quot;wb jimmy&quot; &quot;wb jimmy&quot; &quot;wb jimmy&quot; ... ## $ section : chr [1:483605] &quot;13&quot; &quot;14&quot; &quot;14&quot; &quot;14&quot; ... ## $ area : chr [1:483605] &quot;trib&quot; &quot;trib&quot; &quot;trib&quot; &quot;trib&quot; ... ## $ observedLength : num [1:483605] 61 67 NA NA NA NA NA NA NA NA ... ## $ survey : chr [1:483605] &quot;shock&quot; &quot;shock&quot; NA NA ... ## $ pass : num [1:483605] 1 1 NA NA NA NA NA NA NA NA ... ## $ observedWeight : num [1:483605] 2.7 3.1 NA NA NA NA NA NA NA NA ... ## $ species : chr [1:483605] &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; ... ## $ dateEmigrated : Date[1:483605], format: NA NA NA NA ... ## $ sex : chr [1:483605] NA NA NA NA ... ## $ enc : num [1:483605] 1 1 0 0 0 0 0 0 0 0 ... ## $ ageInSamples : num [1:483605] 0 1 2 3 4 5 6 7 8 9 ... ## $ sampleIndex : num [1:483605] 60 61 62 63 64 65 66 67 68 69 ... ## $ tagIndex : num [1:483605] 385 385 385 385 385 385 385 385 385 385 ... ## $ year : num [1:483605] 2012 2012 2012 2013 2013 ... ## $ season : num [1:483605] 2 3 4 1 2 3 4 1 2 3 ... ## $ proportionSampled: num [1:483605] 1 1 NA NA NA NA NA NA NA NA ... ## $ lagDetectionDate : POSIXct[1:483605], format: &quot;2012-09-17 00:00:00&quot; &quot;2012-12-12 00:00:00&quot; &quot;2013-03-25 00:00:00&quot; &quot;2013-06-05 00:00:00&quot; ... ## $ meanTemperature : num [1:483605] 16.48 7.98 1.25 9.13 16.51 ... ## $ meanFlow : num [1:483605] 0.0315 0.135 0.3647 0.3887 0.3033 ... ## $ knownZ : num [1:483605] 1 1 2 2 2 2 2 2 2 2 ... 2.2.2 Wrangle data 2.2.3 Explore data 2.3 Wanding data 2.3.1 Get data West Brook wanding data if(getNew_cdWB_wanding0) { # from wandingDataWB project in d:/ben/github/wandingData/ cdWB_wanding0 &lt;- createCoreData( sampleType = &quot;portableAntenna&quot;, columnsToAdd = c(&quot;tag&quot;, &quot;detectionDate&quot;, &quot;river&quot;, &quot;area&quot;, &quot;section&quot;, &quot;survey&quot;, &quot;sampleName&quot;, &quot;readerId&quot;, &quot;aliveOrDead&quot;, &quot;instance&quot;, &quot;pass&quot;, &quot;quarter&quot;, &quot;leftOrRight&quot;, &quot;habitat&quot;, &quot;cover&quot;, &quot;justification&quot;, &quot;comment&quot;) ) %&gt;% addTagProperties() %&gt;% dplyr::filter( species %in% c( &quot;bkt&quot;,&quot;bnt&quot;,&quot;ats&quot; ) ) save(cdWB_wanding0, file = &#39;./data/cdWB_wanding0.RData&#39;) } else { load(file = &#39;./data/cdWB_wanding0.RData&#39;) } str(cdWB_wanding0) ## tibble [14,880 x 19] (S3: tbl_df/tbl/data.frame) ## $ tag : chr [1:14880] &quot;00088cf41b&quot; &quot;00088cf41b&quot; &quot;00088cf41b&quot; &quot;00088cf435&quot; ... ## $ detectionDate: POSIXct[1:14880], format: &quot;2010-09-27 11:08:45&quot; &quot;2010-10-18 14:16:22&quot; &quot;2010-10-25 11:40:24&quot; &quot;2010-12-06 13:32:15&quot; ... ## $ sampleName : chr [1:14880] &quot;92710.00&quot; &quot;101810.00&quot; &quot;102510.00&quot; &quot;12610.00&quot; ... ## $ river : chr [1:14880] &quot;wb jimmy&quot; &quot;wb jimmy&quot; &quot;wb jimmy&quot; &quot;wb jimmy&quot; ... ## $ section : chr [1:14880] &quot;13&quot; &quot;14&quot; &quot;14&quot; &quot;2&quot; ... ## $ area : chr [1:14880] &quot;trib&quot; &quot;trib&quot; &quot;trib&quot; &quot;trib&quot; ... ## $ survey : chr [1:14880] &quot;portableAntenna&quot; &quot;portableAntenna&quot; &quot;portableAntenna&quot; &quot;portableAntenna&quot; ... ## $ readerId : chr [1:14880] &quot;iso&quot; &quot;iso&quot; &quot;iso&quot; &quot;iso&quot; ... ## $ aliveOrDead : chr [1:14880] &quot;alive&quot; &quot;alive&quot; NA &quot;alive&quot; ... ## $ instance : num [1:14880] 1 2 3 1 1 1 2 1 1 1 ... ## $ pass : num [1:14880] NA NA NA NA NA NA NA NA NA NA ... ## $ quarter : num [1:14880] 2 1 NA 4 2 4 4 3 4 2 ... ## $ leftOrRight : chr [1:14880] &quot;l&quot; &quot;m&quot; NA &quot;r&quot; ... ## $ habitat : chr [1:14880] &quot;pool&quot; &quot;run&quot; NA &quot;pool&quot; ... ## $ cover : chr [1:14880] NA NA NA NA ... ## $ justification: chr [1:14880] NA NA NA NA ... ## $ comment : chr [1:14880] NA NA NA NA ... ## $ species : chr [1:14880] &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; ... ## $ cohort : num [1:14880] 2010 2010 2010 2010 2009 ... 2.3.2 Wrangle data 2.3.3 Explore data 2.4 Antenna data 2.4.1 Get data West Brook antenna data Note: some pitAntenna code at https://github.com/bletcher/pitAntenna/blob/master/WB/getAndPrepareDataWB.R if(getNew_cdWB_antenna0) { cdWB_antenna0 &lt;- createCoreData( sampleType=c(&quot;stationaryAntenna&quot;), whichDrainage = &quot;west&quot;, columnsToAdd=c( &quot;river&quot;, &quot;riverMeter&quot;, &quot;survey&quot;, &quot;readerID&quot;, &quot;comment&quot; ) ) %&gt;% filter(!is.na(tag)) %&gt;% # for now addTagProperties(columnsToAdd = c( &quot;cohort&quot;, &quot;species&quot;, &quot;dateEmigrated&quot;, &quot;sex&quot;, &quot;species&quot;) ) save(cdWB_antenna0, file = &#39;./data/cdWB_antenna0.RData&#39;) } else { load(file = &#39;./data/cdWB_antenna0.RData&#39;) } str(cdWB_antenna0) ## tibble [410,915 x 10] (S3: tbl_df/tbl/data.frame) ## $ tag : chr [1:410915] &quot;00088cbed9&quot; &quot;00088cbed9&quot; &quot;00088cbed9&quot; &quot;00088cbed9&quot; ... ## $ detectionDate: POSIXct[1:410915], format: &quot;2014-10-17 20:22:33&quot; &quot;2014-10-24 15:34:31&quot; &quot;2014-10-24 16:03:51&quot; &quot;2014-10-24 17:29:37&quot; ... ## $ river : chr [1:410915] &quot;wb mitchell&quot; &quot;wb mitchell&quot; &quot;wb mitchell&quot; &quot;wb mitchell&quot; ... ## $ riverMeter : num [1:410915] 4797 4797 4830 4830 5524 ... ## $ survey : chr [1:410915] &quot;stationaryAntenna&quot; &quot;stationaryAntenna&quot; &quot;stationaryAntenna&quot; &quot;stationaryAntenna&quot; ... ## $ comment : chr [1:410915] NA NA NA NA ... ## $ cohort : num [1:410915] 2013 2013 2013 2013 2013 ... ## $ species : chr [1:410915] &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; &quot;bkt&quot; ... ## $ dateEmigrated: Date[1:410915], format: &quot;2014-10-25&quot; &quot;2014-10-25&quot; &quot;2014-10-25&quot; &quot;2014-10-25&quot; ... ## $ sex : chr [1:410915] NA NA NA NA ... 2.4.2 Wrangle data 2.4.3 Explore data "],["models.html", "Chapter 3 Models 3.1 Young-of-year size model", " Chapter 3 Models List of models will go here 3.1 Young-of-year size model The question here is what is driving body size variation across years in brook trout and brown trout in the WB? We focus on ageInSamples == 1 (age-0 fish in the fall sample) fish for growth model. This is the first sampling occasion that most fish are big enough to tag. Not all fish are big enough, however, and there is a number of untagged fish each year. We need to include both tagged and untagged fish in our age-0 size model. Factors to include in the model are 1. Sample date 2. Cumulative temperature prior to sampling 3. Cumulative flow prior to sampling 4. Extreme flow events?? Floods, droughts? 5. Fish density, age-0 counts across all three salmonids 3.1.1 Raw data for YOY model Environmental data (flow, temperature) are from 1, 3, or 5 months prior to date of individual capture. Also can used fixed dates: assumed spawning dates, assumed emergence dates and actual observation (sample) dates. All fish data are from age-0 in autumn. Abundance data. 3.1.2 Get environmental data getNew_envDataWB &lt;- FALSE West Brook environmental data (flow and temperature) if(getNew_envDataWB) { reconnect() envDataWB &lt;- tbl(conDplyr, &quot;data_daily_temperature&quot;) %&gt;% collect(n = Inf) %&gt;% full_join(tbl(conDplyr, &quot;data_flow_extension&quot;) %&gt;% collect(n = Inf), by = c(&quot;river&quot;, &quot;date&quot;)) %&gt;% select(-source) %&gt;% rename(temperature = daily_mean_temp, flow = qPredicted) %&gt;% mutate(dateDate = as_date(date)) save(envDataWB, file = &#39;./data/envDataWB.RData&#39;) } else { load(file = &#39;./data/envDataWB.RData&#39;) } str(envDataWB) ## tibble [32,189 x 7] (S3: tbl_df/tbl/data.frame) ## $ river : chr [1:32189] &quot;wb jimmy&quot; &quot;wb jimmy&quot; &quot;wb jimmy&quot; &quot;wb jimmy&quot; ... ## $ date : POSIXct[1:32189], format: &quot;1997-05-14&quot; &quot;1997-05-15&quot; &quot;1997-05-16&quot; &quot;1997-05-17&quot; ... ## $ temperature : num [1:32189] 11.57 10.4 10.55 8.84 9.09 ... ## $ daily_max_temp: num [1:32189] 11.6 12.3 11.9 10.2 11.6 ... ## $ daily_min_temp: num [1:32189] 11.57 8.96 9.73 7.74 7.45 ... ## $ flow : num [1:32189] NA NA NA NA NA NA NA NA NA NA ... ## $ dateDate : Date[1:32189], format: &quot;1997-05-14&quot; &quot;1997-05-15&quot; &quot;1997-05-16&quot; &quot;1997-05-17&quot; ... ggplot(envDataWB, aes(date, flow)) + geom_point() + facet_wrap(~river) ggplot(envDataWB, aes(date, temperature)) + geom_point(size = 0.5) + facet_wrap(~river) 3.1.3 Get first observations Filter cdWB_electro for first observations in the autumn for age-0 fish (ageInsamples == 0). Including both tagged and untagged fish. selectedVariables &lt;- c(&quot;tag&quot;, &quot;species&quot;, &quot;river&quot;, &quot;detectionDate&quot;, &quot;sampleNumber&quot;, &quot;n&quot;, &quot;proportionSampled&quot;, &quot;observedLength&quot;, &quot;observedWeight&quot;, &quot;area&quot;, &quot;season&quot;, &quot;isYOY&quot;) firstObs_noTag &lt;- cdWB_electro %&gt;% filter(is.na(tag), ageInSamples == 1) %&gt;% mutate(n = 1) %&gt;% dplyr:: select(all_of(selectedVariables)) firstObs_tag &lt;- cdWB_electro %&gt;% group_by(tag) %&gt;% mutate(isFirstObs = detectionDate == min(detectionDate), n = n()) %&gt;% filter(isFirstObs, ageInSamples == 1) %&gt;% dplyr::select(all_of(selectedVariables)) %&gt;% ungroup() firstObs0 &lt;- add_row(firstObs_tag, firstObs_noTag) %&gt;% mutate(date = as_date(detectionDate), yday = yday(date)) For each date in firstObs0 that at least one fish was captured, calculate summary stats for flow and temperature for different time periods: 1. Assumed spawning to capture 2. Assumed spawning to assumed emergence 3. Assumed emergence to capture 4. One month preceding capture 5. Three months preceding capture 5. Five months preceding capture Then merge results with firstObs0 to create firstObs. spawn_month &lt;- &quot;11&quot; # spawning spawn_day &lt;- &quot;15&quot; emerge_month &lt;- &quot;03&quot; # emergence emerge_day &lt;- &quot;01&quot; firstObsDates &lt;- firstObs0 %&gt;% distinct(date = date(detectionDate), river) # move to getPrepareWBData getEnvMeans &lt;- function(riverIn, start, end) { out &lt;- envDataWB %&gt;% filter(river == riverIn, dateDate &gt;= start, dateDate &lt;= end) %&gt;% summarize( sumT = sum(temperature, na.rm = TRUE), meanT = mean(temperature, na.rm = TRUE), sdT = sd(temperature, na.rm = TRUE), cvT = sdT/meanT, sumF = sum(flow, na.rm = TRUE), meanF = mean(flow, na.rm = TRUE), sdF = sd(flow, na.rm = TRUE), cvF = sdF/meanF, n = n() ) #message(paste(river, start, end,tag)) return(out) } firstObs_Env &lt;- firstObsDates %&gt;% rowwise() %&gt;% mutate( year = year(date), spawnDate = ymd(paste0(year,spawn_month,spawn_day)) - years(1), emergeDate = ymd(paste0(year,emerge_month,emerge_day)), oneMonthDate = date - days(as.integer(1 * 30.5)), #months(1), &#39;months gives error when prev month has 30 days and current has 31 threeMonthDate = date - days(as.integer(3 * 30.5)), fiveMonthDate = date - days(as.integer(5 * 30.5)), spawn_emerge = list(getEnvMeans(river, spawnDate, emergeDate)), emerge_detect = list(getEnvMeans(river, emergeDate, date)), spawn_detect = list(getEnvMeans(river, spawnDate, date)), oneMonth = list(getEnvMeans(river, oneMonthDate, date)), threeMonth = list(getEnvMeans(river, threeMonthDate, date)), fiveMonth = list(getEnvMeans(river, fiveMonthDate, date)) ) # merge env data into firstObs0 firstObs &lt;- firstObs0 %&gt;% left_join(firstObs_Env) #str(firstObs) Unnest firstObs so environmental summary stats are available as data frame with the name of the time interval as the prefix to the statisticVariable name getScaled &lt;- function(d){ (d - mean(d, na.rm = TRUE)) / sd(d, na.rm = TRUE) } firstObsUnnested &lt;- firstObs %&gt;% unnest(cols = c(spawn_emerge, emerge_detect, spawn_detect, oneMonth, threeMonth, fiveMonth), names_sep = &quot;_&quot;) %&gt;% mutate( emerge_detect_sumTScaled = getScaled(emerge_detect_sumT), emerge_detect_sumFScaled = getScaled(emerge_detect_sumF), oneMonth_sumTScaled = getScaled(oneMonth_sumT), oneMonth_sumFScaled = getScaled(oneMonth_sumF), threeMonth_sumTScaled = getScaled(threeMonth_sumT), threeMonth_sumFScaled = getScaled(threeMonth_sumF), fiveMonth_sumTScaled = getScaled(fiveMonth_sumT), fiveMonth_sumFScaled = getScaled(fiveMonth_sumF), ydayScaled = getScaled(yday) ) str(firstObsUnnested) ## tibble [20,783 x 83] (S3: tbl_df/tbl/data.frame) ## $ tag : chr [1:20783] &quot;00088cbed7&quot; &quot;00088cbed8&quot; &quot;00088cbedb&quot; &quot;00088cbedd&quot; ... ## $ species : chr [1:20783] &quot;bkt&quot; &quot;bnt&quot; &quot;bkt&quot; &quot;bkt&quot; ... ## $ river : chr [1:20783] &quot;wb obear&quot; &quot;west brook&quot; &quot;west brook&quot; &quot;wb obear&quot; ... ## $ detectionDate : POSIXct[1:20783], format: &quot;2014-09-17 00:00:00&quot; &quot;2012-09-26 11:01:00&quot; &quot;2014-09-24 11:45:00&quot; &quot;2012-09-21 00:00:00&quot; ... ## $ sampleNumber : num [1:20783] 79 71 79 71 79 71 71 79 71 79 ... ## $ n : num [1:20783] 2 3 1 3 1 1 4 2 1 1 ... ## $ proportionSampled : num [1:20783] 1 1 1 1 1 1 1 1 1 1 ... ## $ observedLength : num [1:20783] 70 86 89 61 60 64 70 62 87 73 ... ## $ observedWeight : num [1:20783] 3.5 6.7 8.3 2.4 2.4 2.8 4.6 2.3 7.5 4.2 ... ## $ area : chr [1:20783] &quot;trib&quot; &quot;inside&quot; &quot;inside&quot; &quot;trib&quot; ... ## $ season : num [1:20783] 3 3 3 3 3 3 3 3 3 3 ... ## $ isYOY : logi [1:20783] TRUE TRUE TRUE TRUE TRUE TRUE ... ## $ date : Date[1:20783], format: &quot;2014-09-17&quot; &quot;2012-09-26&quot; &quot;2014-09-24&quot; &quot;2012-09-21&quot; ... ## $ yday : num [1:20783] 260 270 267 265 269 270 264 260 270 258 ... ## $ year : num [1:20783] 2014 2012 2014 2012 2014 ... ## $ spawnDate : Date[1:20783], format: &quot;2013-11-15&quot; &quot;2011-11-15&quot; &quot;2013-11-15&quot; &quot;2011-11-15&quot; ... ## $ emergeDate : Date[1:20783], format: &quot;2014-03-01&quot; &quot;2012-03-01&quot; &quot;2014-03-01&quot; &quot;2012-03-01&quot; ... ## $ oneMonthDate : Date[1:20783], format: &quot;2014-08-18&quot; &quot;2012-08-27&quot; &quot;2014-08-25&quot; &quot;2012-08-22&quot; ... ## $ threeMonthDate : Date[1:20783], format: &quot;2014-06-18&quot; &quot;2012-06-27&quot; &quot;2014-06-25&quot; &quot;2012-06-22&quot; ... ## $ fiveMonthDate : Date[1:20783], format: &quot;2014-04-18&quot; &quot;2012-04-27&quot; &quot;2014-04-25&quot; &quot;2012-04-22&quot; ... ## $ spawn_emerge_sumT : num [1:20783] 110 358 131 313 131 ... ## $ spawn_emerge_meanT : num [1:20783] 1.03 3.32 1.22 2.9 1.22 ... ## $ spawn_emerge_sdT : num [1:20783] 1.36 2.3 1.56 2.43 1.56 ... ## $ spawn_emerge_cvT : num [1:20783] 1.321 0.695 1.274 0.838 1.274 ... ## $ spawn_emerge_sumF : num [1:20783] 0 48.7 25.7 0 25.7 ... ## $ spawn_emerge_meanF : num [1:20783] NaN 0.451 0.24 NaN 0.24 ... ## $ spawn_emerge_sdF : num [1:20783] NA 0.457 0.352 NA 0.352 ... ## $ spawn_emerge_cvF : num [1:20783] NA 1.01 1.47 NA 1.47 ... ## $ spawn_emerge_n : int [1:20783] 107 108 107 108 107 108 108 107 108 107 ... ## $ emerge_detect_sumT : num [1:20783] 2191 2791 2597 2602 2622 ... ## $ emerge_detect_meanT : num [1:20783] 10.9 13.3 12.5 12.7 12.5 ... ## $ emerge_detect_sdT : num [1:20783] 5.74 4.82 6.36 5 6.33 ... ## $ emerge_detect_cvT : num [1:20783] 0.527 0.362 0.51 0.394 0.507 ... ## $ emerge_detect_sumF : num [1:20783] 0 28.6 71.6 0 71.6 ... ## $ emerge_detect_meanF : num [1:20783] NaN 0.136 0.344 NaN 0.341 ... ## $ emerge_detect_sdF : num [1:20783] NA 0.246 0.533 NA 0.532 ... ## $ emerge_detect_cvF : num [1:20783] NA 1.81 1.55 NA 1.56 ... ## $ emerge_detect_n : int [1:20783] 201 210 208 205 210 210 204 201 210 199 ... ## $ spawn_detect_sumT : num [1:20783] 2301 3149 2728 2915 2753 ... ## $ spawn_detect_meanT : num [1:20783] 7.5 9.93 8.69 9.34 8.71 ... ## $ spawn_detect_sdT : num [1:20783] 6.65 6.27 7.48 6.32 7.46 ... ## $ spawn_detect_cvT : num [1:20783] 0.887 0.631 0.861 0.677 0.857 ... ## $ spawn_detect_sumF : num [1:20783] 0 77.1 97.2 0 97.2 ... ## $ spawn_detect_meanF : num [1:20783] NaN 0.243 0.31 NaN 0.307 ... ## $ spawn_detect_sdF : num [1:20783] NA 0.365 0.482 NA 0.481 ... ## $ spawn_detect_cvF : num [1:20783] NA 1.5 1.56 NA 1.57 ... ## $ spawn_detect_n : int [1:20783] 307 317 314 312 316 317 311 307 317 305 ... ## $ oneMonth_sumT : num [1:20783] 470 461 454 489 445 ... ## $ oneMonth_meanT : num [1:20783] 15.2 14.9 14.6 15.8 14.4 ... ## $ oneMonth_sdT : num [1:20783] 1.69 1.89 2.45 1.7 2.44 ... ## $ oneMonth_cvT : num [1:20783] 0.112 0.127 0.167 0.108 0.17 ... ## $ oneMonth_sumF : num [1:20783] 0 2.1101 -0.0766 0 -0.2195 ... ## $ oneMonth_meanF : num [1:20783] NaN 0.06807 -0.00247 NaN -0.00708 ... ## $ oneMonth_sdF : num [1:20783] NA 0.3031 0.0204 NA 0.0176 ... ## $ oneMonth_cvF : num [1:20783] NA 4.45 -8.24 NA -2.48 ... ## $ oneMonth_n : int [1:20783] 31 31 31 31 31 31 31 31 31 31 ... ## $ threeMonth_sumT : num [1:20783] 1445 1523 1571 1559 1561 ... ## $ threeMonth_meanT : num [1:20783] 15.7 16.6 17.1 16.9 17 ... ## $ threeMonth_sdT : num [1:20783] 1.35 1.8 2.5 1.59 2.59 ... ## $ threeMonth_cvT : num [1:20783] 0.0859 0.1085 0.1463 0.0936 0.1526 ... ## $ threeMonth_sumF : num [1:20783] 0 1.17 12.25 0 11.8 ... ## $ threeMonth_meanF : num [1:20783] NaN 0.0127 0.1331 NaN 0.1283 ... ## $ threeMonth_sdF : num [1:20783] NA 0.184 0.298 NA 0.298 ... ## $ threeMonth_cvF : num [1:20783] NA 14.52 2.24 NA 2.32 ... ## $ threeMonth_n : int [1:20783] 92 92 92 92 92 92 92 92 92 92 ... ## $ fiveMonth_sumT : num [1:20783] 2086 2400 2425 2281 2432 ... ## $ fiveMonth_meanT : num [1:20783] 13.6 15.7 15.8 14.9 15.9 ... ## $ fiveMonth_sdT : num [1:20783] 3.16 2.54 3.07 3.2 2.98 ... ## $ fiveMonth_cvT : num [1:20783] 0.232 0.162 0.194 0.215 0.188 ... ## $ fiveMonth_sumF : num [1:20783] 0 16.9 39.3 0 38.3 ... ## $ fiveMonth_meanF : num [1:20783] NaN 0.111 0.257 NaN 0.251 ... ## $ fiveMonth_sdF : num [1:20783] NA 0.246 0.427 NA 0.427 ... ## $ fiveMonth_cvF : num [1:20783] NA 2.23 1.66 NA 1.7 ... ## $ fiveMonth_n : int [1:20783] 153 153 153 153 153 153 153 153 153 153 ... ## $ emerge_detect_sumTScaled: num [1:20783] -0.261 1.215 0.738 0.751 0.799 ... ## $ emerge_detect_sumFScaled: num [1:20783] -1.346 -0.518 0.727 -1.346 0.725 ... ## $ oneMonth_sumTScaled : num [1:20783] 0.3199 0.1864 0.085 0.5805 -0.0332 ... ## $ oneMonth_sumFScaled : num [1:20783] -0.329 0.206 -0.348 -0.329 -0.384 ... ## $ threeMonth_sumTScaled : num [1:20783] 0.275 0.523 0.676 0.638 0.644 ... ## $ threeMonth_sumFScaled : num [1:20783] -0.798 -0.671 0.536 -0.798 0.488 ... ## $ fiveMonth_sumTScaled : num [1:20783] -0.0187 0.8552 0.9245 0.5252 0.9456 ... ## $ fiveMonth_sumFScaled : num [1:20783] -1.261 -0.376 0.796 -1.261 0.745 ... ## $ ydayScaled : num [1:20783] -0.6678 0.3131 0.0189 -0.1773 0.215 ... #ggplot(firstObsUnnested, aes(oneMonth_sumTScaled, fiveMonth_sumTScaled)) + # geom_point() + # facet_wrap(~river) 3.1.4 Counts of captured fish Min and max years (inclusive) for standardizing counts minYear &lt;- 2000 maxYear &lt;- 2015 Counts by river and species countsRSY &lt;- firstObs %&gt;% filter(year %in% minYear:maxYear) %&gt;% group_by(river, species, year) %&gt;% summarize( count = n(), meanPropSampled = mean(proportionSampled, na.rm = TRUE) ) %&gt;% mutate(countAdj = count / meanPropSampled) %&gt;% ungroup() %&gt;% group_by(river, species) %&gt;% mutate(meanCountRS = mean(count, na.rm = TRUE), sdCountRS = sd(count, na.rm = TRUE), countRS_Scaled = (count - meanCountRS) / sdCountRS) %&gt;% ungroup() ggplot(countsRSY, aes(year, countRS_Scaled, color = species)) + geom_point() + geom_line() + facet_wrap(~ river) Counts by river countsRY &lt;- firstObs %&gt;% filter(year %in% minYear:maxYear) %&gt;% group_by(river, year) %&gt;% summarize( count = n(), meanPropSampled = mean(proportionSampled, na.rm = TRUE) ) %&gt;% mutate(countAdj = count / meanPropSampled) %&gt;% ungroup() %&gt;% group_by(river) %&gt;% mutate(meanCountR = mean(count, na.rm = TRUE), sdCountR = sd(count, na.rm = TRUE), countR_Scaled = (count - meanCountR) / sdCountR) %&gt;% ungroup() ggplot(countsRY, aes(year, countR_Scaled, color = river)) + geom_point() + geom_line() Counts for the metaPopulation (WB, Jimmy, Mitchell) Use these for modelling. countsMetaY &lt;- firstObs %&gt;% filter(river != &quot;wb obear&quot;, year %in% minYear:maxYear) %&gt;% group_by(year) %&gt;% summarize( count = n(), meanPropSampled = mean(proportionSampled, na.rm = TRUE) ) %&gt;% mutate(countAdj = count / meanPropSampled) %&gt;% ungroup() %&gt;% mutate(meanCount = mean(count, na.rm = TRUE), sdCount = sd(count, na.rm = TRUE), count_Scaled = (count - meanCount) / sdCount) # missing data for tribs in 2000, 2001 - may skew scaled count a bit low - should fix ggplot(countsMetaY, aes(year, count_Scaled)) + geom_point() + geom_line() Merge metapopulation scaled counts into firstObsUnnested firstObsUnnested &lt;- firstObsUnnested %&gt;% left_join(countsMetaY %&gt;% dplyr::select(year, count_Scaled)) firstObsUnnestedWB &lt;- firstObsUnnested %&gt;% filter(river == &quot;west brook&quot;) 3.1.5 Raw data plots 3.1.5.1 Frequency plots by species and river 3.1.5.2 Brook Trout, West brook #cd1 &lt;- cdWB_electro %&gt;% filter(ageInSamples == 1, species != &#39;ats&#39;) plotSppRiv = function(s, r) { ggplot(firstObs %&gt;% filter(species == s, river == r), aes(observedLength, color = is.na(tag))) + geom_freqpoly() + geom_vline(xintercept = 60) + ggtitle(paste(s, r, sep = &#39;, &#39;)) + xlim(c(30,125)) + facet_wrap(~ year, scales = &quot;free_y&quot;) } species = &#39;bkt&#39; riverOrdered = &quot;west brook&quot; plotSppRiv(species, riverOrdered) 3.1.5.3 Brook Trout, wb jimmy 3.1.5.4 Brook Trout, wb mitchell 3.1.5.5 Brook Trout, wb obear 3.1.5.6 Brown Trout, West brook 3.1.5.7 Brown Trout, wb jimmy 3.1.5.8 Brown Trout, wb mitchell 3.1.5.9 Brown Trout, wb obear - there are no Brown trout in OBear 3.1.5.10 Trout, in the WB mainstem only ggplot(firstObs %&gt;% filter(species != &quot;ats&quot;), aes(observedLength)) + geom_freqpoly() + geom_vline(xintercept = 60, color = &#39;orange&#39;) + facet_grid(species ~ year) ggplot(firstObs %&gt;% filter(species != &quot;ats&quot;), aes(observedLength, color = is.na(tag))) + geom_freqpoly() + geom_vline(xintercept = 60, color = &#39;orange&#39;) + facet_grid(species ~ year) 3.1.5.11 Why are there untagged fish bigger than 60mm? Check 2002/bkt/WB, as an example firstObs2002BKT &lt;- firstObs %&gt;% filter(year == 2002, species == &quot;bkt&quot;) table(is.na(firstObs2002BKT$tag)) ## ## FALSE TRUE ## 295 253 ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) + geom_freqpoly() + geom_vline(xintercept = 60) # looks like untagged area=inside fish wee morts, the rest were above or below ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) + geom_freqpoly() + geom_vline(xintercept = 60) + facet_grid(~area) # check 2003 ggplot(firstObs %&gt;% filter(year == 2003, species == &quot;bkt&quot;), aes(observedLength, color = is.na(tag))) + geom_freqpoly() + geom_vline(xintercept = 60) + facet_grid(~area) # same story as 2002 3.1.5.12 Why no untagged fish at all for 2000 and 2001? cfirstObs2000_2001BKT &lt;- firstObs %&gt;% filter(year %in% 2000:2001, species == &quot;bkt&quot;) table(is.na(cfirstObs2000_2001BKT$tag)) ## ## FALSE ## 343 table(cfirstObs2000_2001BKT$observedLength) ## ## 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 85 90 ## 18 23 23 26 20 28 19 14 28 23 20 21 9 14 8 11 3 8 4 5 6 5 1 3 2 1 cfirstObs2000_2001BKT %&gt;% filter(observedLength &lt; 60) ## # A tibble: 64 x 26 ## tag species river detectionDate sampleNumber n proportionSampl~ observedLength observedWeight area season ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1bf0fc3~ bkt west~ 2001-09-10 12:00:00 27 2 1 58 1.9 insi~ 3 ## 2 1bf0fc4~ bkt west~ 2001-09-07 12:00:00 27 2 1 57 1.9 insi~ 3 ## 3 1bf0fe5~ bkt west~ 2001-09-07 12:00:00 27 1 1 59 2.1 insi~ 3 ## 4 1bf0fe7~ bkt west~ 2001-09-07 12:00:00 27 6 1 59 2.1 insi~ 3 ## 5 1bf0fe8~ bkt west~ 2001-09-06 12:00:00 27 1 1 59 2.2 insi~ 3 ## 6 1bf0fe8~ bkt west~ 2001-09-10 12:00:00 27 1 1 57 1.9 insi~ 3 ## 7 1bf0fe8~ bkt west~ 2001-09-07 12:00:00 27 3 1 58 2 insi~ 3 ## 8 1bf0fe8~ bkt west~ 2001-09-10 12:00:00 27 2 1 58 2.1 insi~ 3 ## 9 1bf0fe8~ bkt west~ 2001-09-06 12:00:00 27 4 1 58 2 insi~ 3 ## 10 1bf0fe9~ bkt west~ 2001-09-07 12:00:00 27 3 1 58 1.8 insi~ 3 ## # ... with 54 more rows, and 15 more variables: isYOY &lt;lgl&gt;, date &lt;date&gt;, yday &lt;dbl&gt;, year &lt;dbl&gt;, spawnDate &lt;date&gt;, ## # emergeDate &lt;date&gt;, oneMonthDate &lt;date&gt;, threeMonthDate &lt;date&gt;, fiveMonthDate &lt;date&gt;, spawn_emerge &lt;list&gt;, ## # emerge_detect &lt;list&gt;, spawn_detect &lt;list&gt;, oneMonth &lt;list&gt;, threeMonth &lt;list&gt;, fiveMonth &lt;list&gt; ggplot(cfirstObs2000_2001BKT, aes(observedLength, color = is.na(tag))) + geom_freqpoly() + geom_vline(xintercept = 60) 3.1.6 Models based on yearly means Filter firstObsUnnestedWB for bkt, bnt and min/maxYear d_WB_BKT_BNT &lt;- firstObsUnnestedWB %&gt;% filter(species != &quot;ats&quot;, year %in% minYear:maxYear) %&gt;% mutate(species01 = ifelse(species == &quot;bkt&quot;, 1, 0)) hist(d_WB_BKT_BNT$detectionDate, breaks = 250) Mean model functions getMeansData &lt;- function(d, t, f) { means &lt;- d %&gt;% group_by(species, year) %&gt;% summarize(meanLength = mean(observedLength, na.rm = TRUE), meanEmerge_detect_sumTScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE), meanEmerge_detect_sumFScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE), meanTTime_sumTScaled = mean(get(t), na.rm = TRUE), meanFTime_sumFScaled = mean(get(f), na.rm = TRUE), meanYdayScaled = mean(ydayScaled, na.rm = TRUE), meanCount_Scaled = mean(count_Scaled, na.rm = TRUE) ) return(means) } plotMeans &lt;- function(means){ out &lt;- list() out[[1]] &lt;- ggplot(means, aes(year, meanLength, color = species)) + geom_point() + geom_line() out[[2]] &lt;- ggplot(means, aes(meanTTime_sumTScaled, meanLength, color = species)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) out[[3]] &lt;- ggplot(means, aes(meanFTime_sumFScaled, meanLength, color = species)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) out[[4]] &lt;- ggplot(means, aes(meanYdayScaled, meanLength, color = species)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) out[[5]] &lt;- ggplot(means, aes(meanCount_Scaled, meanLength, color = species)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) out[[5]] &lt;- ggplot(means, aes(meanTTime_sumTScaled, meanFTime_sumFScaled, color = species)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) return(out) } runMeanModels &lt;- function(means) { modLMMeans1 &lt;- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), data = means) modLMMeans2 &lt;- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^2, data = means) modLMMeans3 &lt;- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^3, data = means) return(list(modLMMeans1,modLMMeans2,modLMMeans3)) } 3.1.6.1 Flow and temperature from previous one month means1 &lt;- getMeansData(d_WB_BKT_BNT, &quot;oneMonth_sumTScaled&quot;, &quot;oneMonth_sumFScaled&quot;) plotMeans(means1) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] mod1 &lt;- runMeanModels(means1) AIC(mod1[[1]], mod1[[2]], mod1[[3]]) %&gt;% arrange(AIC) ## df AIC ## mod1[[2]] 17 176.2075 ## mod1[[3]] 27 181.7035 ## mod1[[1]] 7 181.8187 summary(mod1[[1]]) ## ## Call: ## lm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + ## meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), ## data = means) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.2779 -1.9839 -0.8754 1.0981 10.5908 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 72.4359 1.0722 67.558 &lt; 2e-16 *** ## factor(species)bnt 0.6550 1.3128 0.499 0.622039 ## meanFTime_sumFScaled 1.6769 0.3849 4.356 0.000184 *** ## meanTTime_sumTScaled -10.3842 2.3734 -4.375 0.000175 *** ## meanYdayScaled -3.4856 1.7314 -2.013 0.054554 . ## meanCount_Scaled -2.5187 0.7068 -3.564 0.001443 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.695 on 26 degrees of freedom ## Multiple R-squared: 0.6966, Adjusted R-squared: 0.6383 ## F-statistic: 11.94 on 5 and 26 DF, p-value: 4.544e-06 rI1 &lt;- relaimpo::calc.relimp(mod1[[1]]) save(means1, mod1, file = &quot;models/mod1LMMeans.Rdata&quot;) 3.1.6.2 Flow and temperature from previous three months means3 &lt;- getMeansData(d_WB_BKT_BNT, &quot;threeMonth_sumTScaled&quot;, &quot;threeMonth_sumFScaled&quot;) plotMeans(means3) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] mod3 &lt;- runMeanModels(means3) AIC(mod3[[1]], mod3[[2]], mod3[[3]]) %&gt;% arrange(AIC) ## df AIC ## mod3[[3]] 27 177.0683 ## mod3[[2]] 17 181.7547 ## mod3[[1]] 7 187.3979 summary(mod3[[1]]) ## ## Call: ## lm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + ## meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), ## data = means) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.3569 -2.8523 0.3445 1.8018 9.2951 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 73.4882 1.8809 39.070 &lt; 2e-16 *** ## factor(species)bnt 0.8334 1.4312 0.582 0.565351 ## meanFTime_sumFScaled 2.2450 0.5866 3.827 0.000732 *** ## meanTTime_sumTScaled -8.8499 3.6769 -2.407 0.023489 * ## meanYdayScaled 0.7120 1.4287 0.498 0.622411 ## meanCount_Scaled -3.1604 0.7937 -3.982 0.000490 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.032 on 26 degrees of freedom ## Multiple R-squared: 0.6388, Adjusted R-squared: 0.5694 ## F-statistic: 9.197 on 5 and 26 DF, p-value: 3.902e-05 rI3 &lt;- relaimpo::calc.relimp(mod3[[1]]) save(means3, mod3, file = &quot;models/mod3LMMeans.Rdata&quot;) 3.1.6.3 Flow and temperature from previous five months means5 &lt;- getMeansData(d_WB_BKT_BNT, &quot;fiveMonth_sumTScaled&quot;, &quot;fiveMonth_sumFScaled&quot;) plotMeans(means5) ## [[1]] ## ## [[2]] ## ## [[3]] ## ## [[4]] ## ## [[5]] mod5 &lt;- runMeanModels(means5) AIC(mod5[[1]], mod5[[2]], mod5[[3]]) %&gt;% arrange(AIC) ## df AIC ## mod5[[3]] 27 167.4034 ## mod5[[1]] 7 193.2144 ## mod5[[2]] 17 208.3847 summary(mod5[[1]]) ## ## Call: ## lm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + ## meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), ## data = means) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.9186 -3.3732 0.3856 2.4470 11.8564 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 71.1144 1.9342 36.767 &lt; 2e-16 *** ## factor(species)bnt 0.8911 1.5671 0.569 0.57450 ## meanFTime_sumFScaled 2.6934 0.8705 3.094 0.00468 ** ## meanTTime_sumTScaled -3.5748 2.9746 -1.202 0.24029 ## meanYdayScaled 3.2403 1.5506 2.090 0.04657 * ## meanCount_Scaled -2.8957 0.8613 -3.362 0.00240 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4.415 on 26 degrees of freedom ## Multiple R-squared: 0.5668, Adjusted R-squared: 0.4835 ## F-statistic: 6.805 on 5 and 26 DF, p-value: 0.0003537 rI5 &lt;- relaimpo::calc.relimp(mod5[[1]]) save(means5, mod5, file = &quot;models/mod5LMMeans.Rdata&quot;) AICs and Relative importance of main effects models df AIC numMonths mod1[[2]] 17 176.207 1 mod1[[3]] 27 181.703 1 mod1[[1]] 7 181.819 1 df AIC numMonths mod3[[3]] 27 177.068 3 mod3[[2]] 17 181.755 3 mod3[[1]] 7 187.398 3 df AIC numMonths mod5[[3]] 27 167.403 5 mod5[[1]] 7 193.214 5 mod5[[2]] 17 208.385 5 var relImp numMonths factor(species) 0.004 1 meanFTime_sumFScaled 0.249 1 meanTTime_sumTScaled 0.200 1 meanYdayScaled 0.063 1 meanCount_Scaled 0.181 1 var relImp numMonths factor(species) 0.004 3 meanFTime_sumFScaled 0.282 3 meanTTime_sumTScaled 0.061 3 meanYdayScaled 0.066 3 meanCount_Scaled 0.226 3 var relImp numMonths factor(species) 0.004 5 meanFTime_sumFScaled 0.227 5 meanTTime_sumTScaled 0.017 5 meanYdayScaled 0.107 5 meanCount_Scaled 0.211 5 3.1.7 Models based on individual observations Probably not use these, too much individual variation 3.1.7.1 Are flow and temperature correlated for individual observations? ggplot(firstObsUnnestedWB, aes(oneMonth_sumTScaled, oneMonth_sumFScaled)) + geom_point(aes(color = (year))) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~ species) ggplot(firstObsUnnestedWB, aes(threeMonth_sumTScaled, threeMonth_sumFScaled)) + geom_point(aes(color = (year))) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~ species) ggplot(firstObsUnnestedWB, aes(fiveMonth_sumTScaled, fiveMonth_sumFScaled)) + geom_point(aes(color = (year))) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~ species) # water getting warmer during a sample ggplot(firstObsUnnestedWB, aes(fiveMonth_sumTScaled, fiveMonth_sumFScaled)) + geom_point(aes(color = (yday))) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~ species) cor(firstObsUnnestedWB$oneMonth_sumTScaled, firstObsUnnestedWB$oneMonth_sumFScaled) ## [1] -0.1778785 cor(firstObsUnnestedWB$threeMonth_sumTScaled, firstObsUnnestedWB$threeMonth_sumFScaled) ## [1] -0.01625096 cor(firstObsUnnestedWB$fiveMonth_sumTScaled, firstObsUnnestedWB$fiveMonth_sumFScaled) ## [1] -0.09445786 # brook trout firstObsUnnestedWB_BKT &lt;- firstObsUnnestedWB %&gt;% filter(species == &quot;bkt&quot;) cor(firstObsUnnestedWB_BKT$oneMonth_sumTScaled, firstObsUnnestedWB_BKT$oneMonth_sumFScaled) ## [1] 0.05756251 cor(firstObsUnnestedWB_BKT$threeMonth_sumTScaled, firstObsUnnestedWB_BKT$threeMonth_sumFScaled) ## [1] -0.008944376 cor(firstObsUnnestedWB_BKT$fiveMonth_sumTScaled, firstObsUnnestedWB_BKT$fiveMonth_sumFScaled) ## [1] -0.1172725 # brown trout firstObsUnnestedWB_BNT &lt;- firstObsUnnestedWB %&gt;% filter(species == &quot;bnt&quot;) cor(firstObsUnnestedWB_BNT$oneMonth_sumTScaled, firstObsUnnestedWB_BNT$oneMonth_sumFScaled) ## [1] 0.1403489 cor(firstObsUnnestedWB_BNT$threeMonth_sumTScaled, firstObsUnnestedWB_BNT$threeMonth_sumFScaled) ## [1] -0.103418 cor(firstObsUnnestedWB_BNT$fiveMonth_sumTScaled, firstObsUnnestedWB_BNT$fiveMonth_sumFScaled) ## [1] -0.009179518 Assign the month interval (one, three, five) for flow and temperature variables. The variable will be accessed using e.g.Â get(tTime) in formulas and filters tTime &lt;- &quot;threeMonth_sumTScaled&quot; fTime &lt;- &quot;threeMonth_sumFScaled&quot; #&quot;fiveMonth_sumFScaled&quot; library(lme4) library(relaimpo) modLM1 &lt;- lm(observedLength ~ (factor(species) * get(tTime) * get(fTime) * ydayScaled * count_Scaled), data = d_WB_BKT_BNT) modLM2 &lt;- lm(observedLength ~ (factor(species) + get(tTime) + get(fTime) + ydayScaled + count_Scaled), data = d_WB_BKT_BNT) modLM3 &lt;- lm(observedLength ~ (factor(species) + get(tTime) + get(fTime) + ydayScaled + count_Scaled)^2, data = d_WB_BKT_BNT) modLM1a &lt;- lm(observedLength ~ (factor(species)), data = d_WB_BKT_BNT) modLM1b &lt;- lm(observedLength ~ (factor(species) * get(tTime)), data = d_WB_BKT_BNT) modLM1c &lt;- lm(observedLength ~ (factor(species) * get(fTime)), data = d_WB_BKT_BNT) modLM1d &lt;- lm(observedLength ~ (factor(species) * ydayScaled), data = d_WB_BKT_BNT) modLM1e &lt;- lm(observedLength ~ (factor(species) * count_Scaled), data = d_WB_BKT_BNT) AIC(modLM1, modLM2, modLM3, modLM1a, modLM1b, modLM1c, modLM1d, modLM1e) %&gt;% arrange(AIC) ## df AIC ## modLM1 33 61643.33 ## modLM3 17 61807.67 ## modLM2 7 62669.02 ## modLM1c 5 63224.10 ## modLM1e 5 63624.09 ## modLM1d 5 63755.95 ## modLM1b 5 63777.11 ## modLM1a 3 63918.49 #relaimpo::calc.relimp(modLM2) # slow for bigger models # get &#39;boundary (singular)&#39; error with model without 2-way interaction #modLMER2 &lt;- lmer(observedLength ~ (factor(species) + emerge_detect_sumTScaled + emerge_detect_sumFScaled + ydayScaled +count_Scaled)^2 + 1|year, data = d_WB_BKT_BNT) #https://gist.github.com/BERENZ/e9b581a4b7160357934e calc.relip.mm &lt;- function(model,type=&#39;lmg&#39;) { if (!isLMM(model) &amp; !isGLMM(model)) { stop(&#39;Currently supports only lmer/glmer objects&#39;, call. = FALSE) } require(lme4) X &lt;- getME(model,&#39;X&#39;) X &lt;- X[,-1] Y &lt;- getME(model,&#39;y&#39;) s_resid &lt;- sigma(model) s_effect &lt;- getME(model,&#39;theta&#39;)*s_resid s2 &lt;- sum(s_resid^2,s_effect^2) V &lt;- Diagonal(x = s2,n=nrow(X)) YX &lt;- cbind(Y,X) cov_XY &lt;- solve( t(YX) %*% solve(V) %*% as.matrix(YX)) colnames(cov_XY) &lt;- rownames(cov_XY) &lt;- colnames(YX) importances &lt;- calc.relimp(as.matrix(cov_XY),rela=T,type=type) return(importances) } #modLMER1 &lt;- lmer(observedLength ~ (factor(species) + get(tTime)|year + get(fTime)|year + ydayScaled|year + count_Scaled|year), data = d_WB_BKT_BNT) modLMER1 &lt;- lmer(observedLength ~ (factor(species) * get(tTime) * get(fTime) * ydayScaled * count_Scaled) + (1|year), data = d_WB_BKT_BNT) modLMER2 &lt;- lmer(observedLength ~ (factor(species) + get(tTime) + get(fTime) + ydayScaled + count_Scaled) + (1|year), data = d_WB_BKT_BNT) modLMER3 &lt;- lmer(observedLength ~ (factor(species) + get(tTime) + get(fTime) + ydayScaled + count_Scaled)^2 + (1|year), data = d_WB_BKT_BNT) # one-by-one modLMER1a &lt;- lmer(observedLength ~ (factor(species)) + (1|year), data = d_WB_BKT_BNT) modLMER1b &lt;- lmer(observedLength ~ (factor(species) * get(tTime)) + (1|year), data = d_WB_BKT_BNT) modLMER1c &lt;- lmer(observedLength ~ (factor(species) * get(fTime)) + (1|year), data = d_WB_BKT_BNT) modLMER1d &lt;- lmer(observedLength ~ (factor(species) * ydayScaled) + (1|year), data = d_WB_BKT_BNT) modLMER1e &lt;- lmer(observedLength ~ (factor(species) * count_Scaled) + (1|year), data = d_WB_BKT_BNT) AIC(modLMER1, modLMER2, modLMER3, modLMER1a, modLMER1b, modLMER1c, modLMER1d, modLMER1e) %&gt;% arrange(AIC) ## df AIC ## modLMER1 34 61236.76 ## modLMER3 18 61411.21 ## modLMER1d 6 61466.63 ## modLMER2 8 61470.46 ## modLMER1e 6 61471.21 ## modLMER1c 6 61472.64 ## modLMER1b 6 61473.34 ## modLMER1a 4 61475.77 calc.relip.mm(modLMER3) ## Response variable: Y ## Total response variance: 3.893283e-05 ## ## 15 Regressors: ## factor(species)bnt get(tTime) get(fTime) ydayScaled count_Scaled factor(species)bnt:get(tTime) factor(species)bnt:get(fTime) factor(species)bnt:ydayScaled factor(species)bnt:count_Scaled get(tTime):get(fTime) get(tTime):ydayScaled get(tTime):count_Scaled get(fTime):ydayScaled get(fTime):count_Scaled ydayScaled:count_Scaled ## Proportion of variance explained by model: 94.15% ## Metrics are normalized to sum to 100% (rela=TRUE). ## ## Relative importance metrics: ## ## lmg ## factor(species)bnt 0.097760307 ## get(tTime) 0.419878608 ## get(fTime) 0.092676088 ## ydayScaled 0.033569860 ## count_Scaled 0.078624107 ## factor(species)bnt:get(tTime) 0.065441939 ## factor(species)bnt:get(fTime) 0.012771321 ## factor(species)bnt:ydayScaled 0.001781329 ## factor(species)bnt:count_Scaled 0.019728183 ## get(tTime):get(fTime) 0.071941193 ## get(tTime):ydayScaled 0.029205652 ## get(tTime):count_Scaled 0.041529196 ## get(fTime):ydayScaled 0.011797805 ## get(fTime):count_Scaled 0.012243731 ## ydayScaled:count_Scaled 0.011050681 ## ## Average coefficients for different model sizes: ## ## 1X 2Xs 3Xs 4Xs 5Xs 6Xs ## factor(species)bnt -0.0054984017 -0.0050704814 -0.0047545824 -0.0045389793 -0.0044124337 -4.364877e-03 ## get(tTime) -0.0065705658 -0.0064807310 -0.0063924113 -0.0063084199 -0.0062305836 -6.159911e-03 ## get(fTime) -0.0086478481 -0.0078930543 -0.0071804983 -0.0065359969 -0.0059811793 -5.531536e-03 ## ydayScaled 0.0031793857 0.0027052187 0.0022831959 0.0019197886 0.0016131058 1.358765e-03 ## count_Scaled -0.0083583700 -0.0078052106 -0.0072775852 -0.0068141491 -0.0064372666 -6.153114e-03 ## factor(species)bnt:get(tTime) 0.0025119506 0.0020567879 0.0016471742 0.0012672530 0.0009056673 5.550952e-04 ## factor(species)bnt:get(fTime) 0.0060183654 0.0047218822 0.0036288022 0.0027025061 0.0019065191 1.208199e-03 ## factor(species)bnt:ydayScaled -0.0002196817 -0.0002660699 -0.0003114297 -0.0003574487 -0.0004026767 -4.443192e-04 ## factor(species)bnt:count_Scaled 0.0067855005 0.0051864389 0.0038694571 0.0027807734 0.0018716941 1.101015e-03 ## get(tTime):get(fTime) 0.0032931088 0.0027736154 0.0023758016 0.0020597885 0.0017908497 1.540839e-03 ## get(tTime):ydayScaled -0.0013525912 -0.0010122936 -0.0007224178 -0.0004705386 -0.0002496660 -5.582531e-05 ## get(tTime):count_Scaled 0.0023356306 0.0018431949 0.0014769807 0.0011882760 0.0009424538 7.171659e-04 ## get(fTime):ydayScaled -0.0024680341 -0.0027398874 -0.0028756456 -0.0029246083 -0.0029130457 -2.855016e-03 ## get(fTime):count_Scaled 0.0011703243 -0.0002162869 -0.0012391144 -0.0020246858 -0.0026437455 -3.130556e-03 ## ydayScaled:count_Scaled -0.0060601403 -0.0042294345 -0.0028505144 -0.0018549978 -0.0011694592 -7.240908e-04 ## 7Xs 8Xs 9Xs 10Xs 11Xs 12Xs ## factor(species)bnt -0.0043881071 -4.475745e-03 -0.0046223344 -0.0048218598 -5.066310e-03 -5.345099e-03 ## get(tTime) -0.0060966732 -6.040385e-03 -0.0059898316 -0.0059432666 -5.898799e-03 -5.854907e-03 ## get(fTime) -0.0051950013 -4.970278e-03 -0.0048458768 -0.0048005235 -4.804691e-03 -4.822743e-03 ## ydayScaled 0.0011534566 9.968974e-04 0.0008927463 0.0008487173 8.757443e-04 9.858444e-04 ## count_Scaled -0.0059544293 -5.824393e-03 -0.0057402718 -0.0056771394 -5.612643e-03 -5.533014e-03 ## factor(species)bnt:get(tTime) 0.0002111539 -1.287035e-04 -0.0004659555 -0.0008012831 -1.134412e-03 -1.463815e-03 ## factor(species)bnt:get(fTime) 0.0005806889 3.882144e-06 -0.0005343247 -0.0010365233 -1.495172e-03 -1.894321e-03 ## factor(species)bnt:ydayScaled -0.0004787153 -5.010271e-04 -0.0005046357 -0.0004807007 -4.185323e-04 -3.073680e-04 ## factor(species)bnt:count_Scaled 0.0004359225 -1.482176e-04 -0.0006682334 -0.0011336990 -1.548402e-03 -1.913621e-03 ## get(tTime):get(fTime) 0.0012890129 1.022548e-03 0.0007363939 0.0004323806 1.179063e-04 -1.953488e-04 ## get(tTime):ydayScaled 0.0001139192 2.627106e-04 0.0003945425 0.0005145068 6.287198e-04 7.438227e-04 ## get(tTime):count_Scaled 0.0005002465 2.873275e-04 0.0000795192 -0.0001188814 -3.028894e-04 -4.695265e-04 ## get(fTime):ydayScaled -0.0027585842 -2.629436e-03 -0.0024725885 -0.0022926181 -2.093092e-03 -1.875890e-03 ## get(fTime):count_Scaled -0.0034980296 -3.748389e-03 -0.0038800558 -0.0038917388 -3.784748e-03 -3.564784e-03 ## ydayScaled:count_Scaled -0.0004553432 -3.058715e-04 -0.0002237541 -0.0001619201 -7.825575e-05 6.336058e-05 ## 13Xs 14Xs 15Xs ## factor(species)bnt -0.0056461457 -5.959040e-03 -0.0062796744 ## get(tTime) -0.0058109959 -5.767910e-03 -0.0057282815 ## get(fTime) -0.0048158521 -4.746171e-03 -0.0045799533 ## ydayScaled 0.0011888137 1.489186e-03 0.0018864288 ## count_Scaled -0.0054389891 -5.349606e-03 -0.0053039170 ## factor(species)bnt:get(tTime) -0.0017867916 -2.100436e-03 -0.0024036120 ## factor(species)bnt:get(fTime) -0.0022142922 -2.438114e-03 -0.0025565105 ## factor(species)bnt:ydayScaled -0.0001392003 8.910015e-05 0.0003764257 ## factor(species)bnt:count_Scaled -0.0022331996 -2.519186e-03 -0.0027966124 ## get(tTime):get(fTime) -0.0004927221 -7.584234e-04 -0.0009773304 ## get(tTime):ydayScaled 0.0008660298 1.000118e-03 0.0011493099 ## get(tTime):count_Scaled -0.0006202278 -7.623248e-04 -0.0009098491 ## get(fTime):ydayScaled -0.0016406077 -1.384448e-03 -0.0011021992 ## get(fTime):count_Scaled -0.0032439647 -2.841580e-03 -0.0023829029 ## ydayScaled:count_Scaled 0.0002913468 6.252846e-04 0.0010782461 library(MuMIn) r.squaredGLMM(modLMER1) ## R2m R2c ## [1,] 0.2001733 0.6185189 summary(modLMER1) ## Linear mixed model fit by REML [&#39;lmerMod&#39;] ## Formula: observedLength ~ (factor(species) * get(tTime) * get(fTime) * ydayScaled * count_Scaled) + (1 | year) ## Data: d_WB_BKT_BNT ## ## REML criterion at convergence: 61168.8 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -3.4018 -0.6876 -0.0288 0.6436 6.6810 ## ## Random effects: ## Groups Name Variance Std.Dev. ## year (Intercept) 85.83 9.264 ## Residual 78.27 8.847 ## Number of obs: 8499, groups: year, 16 ## ## Fixed effects: ## Estimate Std. Error t value ## (Intercept) 80.8481 4.1701 19.388 ## factor(species)bnt -4.9284 1.4042 -3.510 ## get(tTime) -21.6554 7.2622 -2.982 ## get(fTime) 9.4220 4.0516 2.325 ## ydayScaled -4.0731 2.7473 -1.483 ## count_Scaled -6.0394 4.2307 -1.427 ## factor(species)bnt:get(tTime) 12.0455 2.5799 4.669 ## factor(species)bnt:get(fTime) 0.3451 1.5233 0.227 ## get(tTime):get(fTime) -16.8596 7.6738 -2.197 ## factor(species)bnt:ydayScaled 0.6682 3.0523 0.219 ## get(tTime):ydayScaled 1.0575 5.4994 0.192 ## get(fTime):ydayScaled -9.3848 2.6598 -3.528 ## factor(species)bnt:count_Scaled 0.8883 1.0017 0.887 ## get(tTime):count_Scaled 13.6476 9.5497 1.429 ## get(fTime):count_Scaled -15.7569 3.8771 -4.064 ## ydayScaled:count_Scaled 9.2820 2.0254 4.583 ## factor(species)bnt:get(tTime):get(fTime) -7.3923 3.1937 -2.315 ## factor(species)bnt:get(tTime):ydayScaled 2.1106 6.5449 0.322 ## factor(species)bnt:get(fTime):ydayScaled -0.9930 2.7942 -0.355 ## get(tTime):get(fTime):ydayScaled 10.3113 5.9959 1.720 ## factor(species)bnt:get(tTime):count_Scaled -2.1328 2.5544 -0.835 ## factor(species)bnt:get(fTime):count_Scaled 6.4230 1.8794 3.418 ## get(tTime):get(fTime):count_Scaled 18.3310 9.7834 1.874 ## factor(species)bnt:ydayScaled:count_Scaled -5.4154 2.0331 -2.664 ## get(tTime):ydayScaled:count_Scaled -18.1465 5.1346 -3.534 ## get(fTime):ydayScaled:count_Scaled 5.0809 2.7461 1.850 ## factor(species)bnt:get(tTime):get(fTime):ydayScaled 6.9942 7.1420 0.979 ## factor(species)bnt:get(tTime):get(fTime):count_Scaled -16.6416 4.1143 -4.045 ## factor(species)bnt:get(tTime):ydayScaled:count_Scaled 12.3811 5.7403 2.157 ## factor(species)bnt:get(fTime):ydayScaled:count_Scaled 0.8281 3.2880 0.252 ## get(tTime):get(fTime):ydayScaled:count_Scaled -15.0936 7.8332 -1.927 ## factor(species)bnt:get(tTime):get(fTime):ydayScaled:count_Scaled 0.3270 9.4661 0.035 ranef(modLMER1) ## $year ## (Intercept) ## 2000 8.8500565 ## 2001 -8.4985347 ## 2002 -7.3323965 ## 2003 -1.5660312 ## 2004 -5.1466870 ## 2005 -1.0172900 ## 2006 3.5989690 ## 2007 10.3090430 ## 2008 -0.7230606 ## 2009 6.7853759 ## 2010 5.6472890 ## 2011 -21.6975629 ## 2012 -3.4055069 ## 2013 9.6487802 ## 2014 4.0152310 ## 2015 0.5323252 ## ## with conditional variances for &quot;year&quot; Raw data exploration following the models relaimpo::calc.relimp(modLM2) - other models are too big lmg factor(species) 0.005339423 emerge_detect_sumTScaled 0.006883496 emerge_detect_sumFScaled 0.063450197 ydayScaled 0.012116064 count_Scaled 0.028031531 ggplot(d_WB_BKT_BNT, aes(get(fTime), observedLength)) + geom_point(alpha = 0.2) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~species) ggplot(d_WB_BKT_BNT, aes(count_Scaled, observedLength)) + geom_point(alpha = 0.2) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~species) ggplot(d_WB_BKT_BNT, aes(ydayScaled, observedLength)) + geom_point(alpha = 0.2) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~species) ggplot(d_WB_BKT_BNT, aes(get(tTime), observedLength)) + geom_point(alpha = 0.2) + geom_smooth(method = &quot;lm&quot;) + facet_wrap(~species) "],["final-words.html", "Chapter 4 Final Words", " Chapter 4 Final Words We have finished a nice book. "],["references.html", "References", " References Some references related to the West Brook study. Will need to update and sort. (From Bens Mendelay, searched for West brook and deleted a few refs). Grader, M., and Letcher, B. 2006. Diel and seasonal gut fullness and prey composition of Atlantic salmon parr in the west brook. J. Freshw. Ecol. 21(3): 503517. Armstrong, J.D., and Nislow, K.H. 2012. Modelling approaches for relating effects of change in river flow to populations of Atlantic salmon and brown trout. Fish. Manag. Ecol. 19(6): 527536. doi:10.1111/j.1365-2400.2011.00835.x. Letcher, B.H., Dubreuil, T.L., ODonnell, M.J., Obedzinski, M., Griswold, K., and Nislow, K.H. 2004. Long-term consequences of variation in timing and manner of fry introduction on juvenile Atlantic salmon (Salmo salar) growth, survival, and life-history expression. Can. J. Fish. Aquat. Sci. 61(12): 22882301. doi:10.1139/f04-214. Letcher, B.H., and Gries, G. 2003. Effects of life history variation on size and growth in stream-dwelling Atlantic salmon. J. Fish Biol. 62(1): 97114. doi:10.1046/j.0022-1112.2003.00009.x. Xu, C.L., Letcher, B.H., and Nislow, K.H. 2010. Size-dependent survival of brook trout Salvelinus fontinalis in summer: effects of water temperature and stream flow. J. Fish Biol. 76(10): 23422369. doi:10.1111/j.1095-8649.2010.02619.x. ODonnell, M.J., and Letcher, B.H. 2017. Implanting 8-mm passive integrated transponder tags into small Brook Trout: Effects on growth and survival in the laboratory. North Am. J. Fish. Manag. 37(3): 605611. Taylor &amp; Francis. doi:10.1080/02755947.2017.1307291. Zydlewski, G.B., Horton, G.E., Dubreuil, T.L., Letcher, B.H., Casey, S., and Zydlewski, J. 2006. Remote Monitoring of Fish in Small Streams: a unified approach using PIT tags. Fisheries 31(10): 492502. doi:10.1577/1548-8446(2006)31[492:RMOFIS]2.0.CO;2. Sigourney, D.B., Letcher, B.H., Obedzinski, M., and Cunjak, R. a. 2013. Interactive effects of life history and season on size-dependent growth in juvenile Atlantic salmon. Ecol. Freshw. Fish 22(4): 495507. doi:10.1111/eff.12042. Letcher, B.H., Hocking, D.J., ONeil, K., Whiteley, A.R., Nislow, K.H., and ODonnell, M.J. 2016. A hierarchical model of daily stream temperature using air-water temperature synchronization, autocorrelation, and time lags. PeerJ 4: e1727. doi:10.7717/peerj.1727. Horton, G.E., Dubreuil, T.L., and Letcher, B.H. 2007. A Model for Estimating Passive Integrated Transponder (PIT) Tag Antenna Efficiencies for Interval-Specific Emigration Rates. Trans. Am. Fish. Soc. 136(5): 11651176. doi:10.1577/T06-053.1. Bassar, R.D., Letcher, B.H., Nislow, K.H., and Whiteley, A.R. 2016. Changes in seasonal climate outpace compensatory density-dependence in eastern brook trout. Glob. Chang. Biol.: 577593. doi:10.1111/gcb.13135. Letcher, B.H., Nislow, K.H., ODonnell, M.J., Whiteley, A.R., Coombs, J.A., and Dubreuil, T.L. 2022. Cohort strength and body size in co-occurring salmonids in a small stream network: variation in space and time. Can. J. Fish. Aquat. Sci. 79(1): 133147. doi:10.1139/cjfas-2020-0418. Letcher, B.H., Coombs, J. a., and Nislow, K.H. 2011. Maintenance of phenotypic variation: repeatability, heritability and size-dependent processes in a wild brook trout population. Evol. Appl. 4(4): 602615. doi:10.1111/j.1752-4571.2011.00184.x. Letcher, B.H., Gries, G., and Juanes, F. 2002. Survival of Stream-Dwelling Atlantic Salmon: Effects of Life History Variation, Season, and Age. Trans. Am. Fish. Soc. 131(5): 838854. doi:10.1577/1548-8659(2002)131&lt;0838:SOSDAS&gt;2.0.CO;2. Letcher, B.H. 2003. Life history dependent morphometric variation in stream-dwelling Atlantic salmon. Oecologia 137(4): 53340. doi:10.1007/s00442-003-1387-0. Sigourney, D.B., Letcher, B.H., Obedzinski, M., and Cunjak, R.A. 2008. Size-independent growth in fishes: patterns, models and metrics. J. Fish Biol. 72(10): 24352455. doi:10.1111/j.1095-8649.2008.01830.x. Davidson, R.S., Letcher, B.H., and Nislow, K.H. 2010. Drivers of growth variation in juvenile Atlantic salmon ( Salmo salar ): an elasticity analysis approach. J. Anim. Ecol. 79(5): 11131121. doi:10.1111/j.1365-2656.2010.01708.x. Nislow, K.H., and Armstrong, J.D. 2012. Towards a life-history-based management framework for the effects of flow on juvenile salmonids in streams and rivers. Fish. Manag. Ecol. 19(6): 451463. doi:10.1111/j.1365-2400.2011.00810.x. Whiteley, A.R., Coombs, J. a., Cembrola, M., ODonnell, M.J., Hudy, M., Nislow, K.H., and Letcher, B.H. 2015. Effective number of breeders provides a link between interannual variation in stream flow and individual reproductive contribution in a stream salmonid. Mol. Ecol.: n/a-n/a. doi:10.1111/mec.13273. Letcher, B.H., Horton, G.E., Dubreuil, T.L., and Donnell, M.J.O. 2005. A field test of the extent of bias in selection estimates after accounting for emigration. Evol. Ecol.: 643650. Pearlstein, J.H., Letcher, B.H., and Obedzinski, M. 2007. Early Discrimination of Atlantic Salmon Smolt Age: Time Course of the Relative Effectiveness of Body Size and Shape. Trans. Am. Fish. Soc. 136(6): 16221632. doi:10.1577/T07-010.1. Carlson, S.M., Hendry, A.P., and Letcher, B.H. 2004. Natural selection acting on body size , growth rate and compensatory growth : an empirical test in a wild trout population. Evol. Ecol.: 955973. Letcher, B.H., Schueller, P., Bassar, R.D., Nislow, K.H., Coombs, J.A., Sakrejda, K., Morrissey, M., Sigourney, D.B., Whiteley, A.R., ODonnell, M.J., and Dubreuil, T.L. 2015. Robust estimates of environmental effects on population vital rates: an integrated capture-recapture model of seasonal brook trout growth, survival and movement in a stream network. J. Anim. Ecol. 84(2): 337352. doi:10.1111/1365-2656.12308. Carlson, S.M., Hendry, a. P., and Letcher, B.H. 2007. Growth rate differences between resident native brook trout and non-native brown trout. J. Fish Biol. 71(5): 14301447. doi:10.1111/j.1095-8649.2007.01615.x. ODonnell, M.J., Horton, G.E., and Letcher, B.H. 2010. Use of Portable Antennas to Estimate Abundance of PIT-Tagged Fish in Small Streams: Factors Affecting Detection Probability. North Am. J. Fish. Manag. 30: 323336. doi:10.1577/M09-008.1. Letcher, B.H., Nislow, K.H., Coombs, J., ODonnell, M.J., and Dubreuil, T.L. 2007. Population response to habitat fragmentation in a stream-dwelling brook trout population. PLoS One 2(11): e1139. doi:10.1371/journal.pone.0001139. Carlson, S.M., and Letcher, B.H. 2003. Variation in brook and brown trout survival within and among seasons, species, and age classes. J. Fish Biol. 63(3): 780794. doi:10.1046/j.1095-8649.2003.00191.x. Hendry, A.P., Letcher, B.H., and Gries, G. 2003. Estimating Natural Selection Acting on Stream-Dwelling Atlantic Salmon: Implications for the Restoration of Extirpated Populations. Conserv. Biol. 17(3): 795805. doi:10.1046/j.1523-1739.2003.02075.x. Letcher, B.H., Schueller, P., Bassar, R.D., Nislow, K.H., Coombs, J. a, Sakrejda, K., Morrissey, M., Sigourney, D.B., Whiteley, A.R., ODonnell, M.J., and Dubreuil, T.L. 2015. Robust estimates of environmental effects on population vital rates: an integrated capture-recapture model of seasonal brook trout growth, survival and movement in a stream network. J. Anim. Ecol. 84(2): 337352. doi:10.1111/1365-2656.12308. Letcher, B.H., and Horton, G.E. 2008. Seasonal variation in size-dependent survival of juvenile Atlantic salmon (Salmo salar): performance of multistate capture-mark-recapture models. Can. J. Fish. Aquat. Sci. 65(8): 16491666. doi:10.1139/F08-083. Horton, G.E., Letcher, B.H., Bailey, M.M., and Kinnison, M.T. 2009. Atlantic salmon (Salmo salar) smolt production: the relative importance of survival and body growth. Can. J. Fish. Aquat. Sci. 66(3): 471483. doi:10.1139/F09-005. Scace, J.G., Letcher, B.H., and Noreika, J. 2007. An Efficient Smolt Trap for Sandy and Debris-Laden Streams. North Am. J. Fish. Manag. 27(4): 12761286. doi:10.1577/M07-036.1. Gries, G., and Letcher, B.H. 2002. A Night Seining Technique for Sampling Juvenile Atlantic Salmon in Streams. North Am. J. Fish. Manag. 22(2): 595601. doi:10.1577/1548-8675(2002)022&lt;0595:ANSTFS&gt;2.0.CO;2. Childress, E.S., and Letcher, B.H. 2017. Estimating thermal performance curves from repeated field observations. Ecology 98(5): 13771387. doi:10.1002/ecy.1801. Aubin-Horth, N., Letcher, B.H., and Hofmann, H. a. 2009. Gene-expression signatures of Atlantic salmons plastic life cycle. Gen.Â Comp. Endocrinol. 163(3): 27884. Elsevier Inc.Â doi:10.1016/j.ygcen.2009.04.021. Childress, E.S., Nislow, K.H., Whiteley, A.R., ODonnell, M.J., and Letcher, B.H. 2019. Daily estimates reveal fine-scale temporal and spatial variation in fish survival across a stream network. Can. J. Fish. Aquat. Sci. 76(8): 14461458. doi:10.1139/cjfas-2018-0191. Kanno, Y., Letcher, B.H., Coombs, J. a., Nislow, K.H., and Whiteley, A.R. 2014. Linking movement and reproductive history of brook trout to assess habitat connectivity in a heterogeneous stream network. Freshw. Biol. 59(1): 142154. doi:10.1111/fwb.12254. Horton, G.E., Letcher, B.H., and Kendall, W.L. 2011. A Multistate CaptureRecapture Modeling Strategy to Separate True Survival from Permanent Emigration for a Passive Integrated Transponder Tagged Population of Stream Fish. Trans. Am. Fish. Soc. 140(2): 320333. doi:10.1080/00028487.2011.567861. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
